第一个：bio 同步阻塞I/O模式
第二个: 伪异步阻塞I/O模式
第三个：nio 异步阻塞I/0模式
第四个：aio 事件驱动I/O模式

四种I/O模型的功能和特性对比
____________________________________________________________________________________________________
                    | 同步阻塞I/O (BIO) | 伪异步I/O    | 非阻塞 I/O (NIO)    | 异步I/O (AIO)
——————————————————————————————————————————————————
客户端个数：I/O线程 | 1:1               |M : N (其中   |M:1(1个I/O线程处理   |M:0 （不需要启动额外
                    |                   |M可以大于N)   |多个客户端连接)      |的I/O线程，被动回调）
——————————————————————————————————————————————————
I/O阻塞类型         |    阻塞I/O        |  阻塞I/O     |  非阻塞I/O          | 非阻塞I/O
——————————————————————————————————————————————————
I/O同步类型         |    同步I/O        | 同步I/O      |同步I/O(I/O多路复用) | 异步I/O
——————————————————————————————————————————————————
API使用难度         |    简单           | 简单         |  非常复杂           | 复杂
——————————————————————————————————————————————————
调试难度            |    简单           | 简单         |  复杂               | 复杂
——————————————————————————————————————————————————
可靠性              |    非常差         | 差           | 高                  | 高
——————————————————————————————————————————————————
吞吐量              |    低             | 中           | 高                  | 高
——————————————————————————————————————————————————

TCP 粘包/拆包问题

TCP 是个 “流”，TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分，所以
一个完整的包可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成一个大的数据包发送，这就是
所谓的TCP粘包和拆包问题。

产生原因：
1）应用程序write写入的字节大小大于套接口发送缓冲区大小
2）进行MSS大小的TCP分段
3）以太网帧的payload大于MTU进行IP分片

解决策略：
1）消息定长，例如每个报文的大小为固定长度200字节，如果不够，空位补空格
2）在包尾增加回车换行符进行分割
3）将消息分为消息头和消息体，消息头中包含表示消息总长度的字段
4）更复杂的应用层协议